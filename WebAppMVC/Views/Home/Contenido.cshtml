@{
	ViewData["Title"] = "Contenido";
}
<div class="container mt-5 mb-5 p-5">

	<h1>@ViewData["Title"]</h1>
	<p>A continuación se muestra el contenido visto a lo largo de la cursada.</p>

	<strong>Concurrencia</strong>
	<p>
		La concurrencia se refiere a la capacidad de un sistema informático para ejecutar múltiples tareas de manera simultánea o aparentemente simultánea. En programación orientada a objetos, la concurrencia implica la creación de aplicaciones que pueden realizar múltiples operaciones al mismo tiempo, lo que puede mejorar el rendimiento y la eficiencia. Sin embargo, la concurrencia también presenta desafíos, como la gestión de recursos compartidos y la prevención de condiciones de carrera.
	</p>
	<strong>
		Protocolo TCP/IP Cliente - Servidor
	</strong>
	<p>
		En la programación orientada a objetos, el protocolo TCP/IP se utiliza para establecer la comunicación entre sistemas a través de una red. El modelo cliente-servidor es un enfoque común en el que un cliente solicita servicios o recursos a un servidor. Los programadores utilizan clases y objetos para implementar aplicaciones tanto del lado del cliente como del servidor, permitiendo la comunicación de datos y la realización de acciones a través de la red.
	</p>
	<strong>
		C# Consola y Forms
	</strong>
	<p>
		C# es un lenguaje de programación orientado a objetos desarrollado por Microsoft. En C#, se pueden crear aplicaciones tanto de consola como de ventanas (Windows Forms). Las aplicaciones de consola son aquellas que interactúan con el usuario a través de la línea de comandos, mientras que las aplicaciones de Forms utilizan interfaces gráficas de usuario (GUI) para interactuar con el usuario mediante ventanas, botones y otros controles.
	</p>
	<strong>
		Patrones de Diseño
	</strong>
	<p>
		Los patrones de diseño son soluciones reutilizables a problemas comunes en el diseño de software. En programación orientada a objetos, estos patrones se aplican a través de la creación de clases y objetos de una manera que resuelva de manera efectiva y eficiente problemas específicos. Ejemplos de patrones de diseño incluyen Singleton, Factory, Observer, y muchos otros que ayudan a estructurar y mantener un código limpio y modular
	</p>
	<strong>
		Acceso a DB
	</strong>
	<p>
		El acceso a bases de datos es un aspecto importante en la programación orientada a objetos. Permite a las aplicaciones interactuar con sistemas de bases de datos para almacenar, recuperar y manipular datos. En este contexto, se crean clases y objetos que facilitan la conexión, consulta y actualización de bases de datos. Los ORM (Mapeo Objeto-Relacional) también se utilizan para facilitar la interacción con bases de datos relacionales.
	</p>
	<strong>
		Modelo Vista Control (MVC)
	</strong>
	<p>
		MVC es un patrón de diseño de software que se utiliza para organizar una aplicación en tres componentes principales: Modelo (representa los datos y la lógica de la aplicación), Vista (maneja la presentación y la interfaz de usuario) y Controlador (gestiona las interacciones del usuario y controla el flujo de la aplicación). En la programación orientada a objetos, cada uno de estos componentes se puede implementar como clases y objetos separados.
	</p>
	<strong>
		APIs
	</strong>
	<p>
		Las APIs (Interfaces de Programación de Aplicaciones) son conjuntos de reglas y protocolos que permiten que diferentes aplicaciones o componentes de software se comuniquen entre sí. En programación orientada a objetos, las APIs se implementan como conjuntos de clases y métodos que exponen funciones y datos específicos para ser utilizados por otras aplicaciones. Las APIs permiten la integración y la interoperabilidad entre diferentes sistemas de software.
	</p>

</div>